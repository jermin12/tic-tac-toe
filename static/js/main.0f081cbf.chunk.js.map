{"version":3,"sources":["Square.js","Game.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","onclick","letter","Game","state","squares","Array","fill","turnX","i","this","slice","calculatewinner","setState","click","winninglines","j","length","a","b","c","status","winner","createbutton","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAUeA,EARA,SAACC,GAEf,OACC,4BAAQC,UAAU,QAAQC,QAASF,EAAMG,SAAUH,EAAMI,SC0G5CC,G,wDAzGd,WAAaL,GACX,IAAD,8BACC,cAAMA,IACDM,MAAQ,CACZC,QAAQC,MAAM,GAAGC,KAAK,MACtBC,OAAM,GAJR,E,kDASIC,GAEF,IAAMJ,EAAQK,KAAKN,MAAMC,QAAQM,QAE/BD,KAAKE,gBAAgBP,IAAUA,EAAQI,KAE3CJ,EAAQI,GAAGC,KAAKN,MAAMI,MAAO,IAAI,IAEjCE,KAAKG,SAAS,CAACR,QAAQA,EACrBG,OAAOE,KAAKN,MAAMI,W,mCAITC,GACZ,IAAD,OACE,OAAO,kBAAC,EAAD,CAAQP,OAAQQ,KAAKN,MAAMC,QAAQI,GAAIR,QAAS,kBAAI,EAAKa,MAAML,Q,sCAIxDJ,GAab,IAXA,IAAMU,EAAe,CACrB,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAGGC,EAAE,EAAGA,EAAED,EAAaE,OAAQD,IACpC,CAAC,IAAD,cACiBD,EAAaC,GAD9B,GACQE,EADR,KACUC,EADV,KACYC,EADZ,KAEC,GAAGf,EAAQa,IAAMb,EAAQa,KAAOb,EAAQc,IAAMd,EAAQa,KAAOb,EAAQe,GACnE,OAAOf,EAAQa,GAGjB,OAAO,O,+BAYT,IAAIG,EACEC,EAASZ,KAAKE,gBAAgBF,KAAKN,MAAMC,SAW7C,OAREgB,EADEC,EACO,UAAYA,EAIZ,gBAAkBZ,KAAKN,MAAMI,MAAQ,IAAM,KAMtD,yBAAKT,UAAU,OACf,6BAAMsB,GACN,yBAAKtB,UAAU,iCACbW,KAAKa,aAAa,GAClBb,KAAKa,aAAa,GAClBb,KAAKa,aAAa,IAGpB,yBAAKxB,UAAU,iCACZW,KAAKa,aAAa,GAClBb,KAAKa,aAAa,GAClBb,KAAKa,aAAa,IAGrB,yBAAKxB,UAAU,iCACdW,KAAKa,aAAa,GAClBb,KAAKa,aAAa,GAClBb,KAAKa,aAAa,S,GA9FJC,cCQCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0f081cbf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Square = (props) => {\r\n\t\r\n\treturn (\r\n\t\t<button className=\"w2 h2\" onClick={props.onclick}>{props.letter}</button>\r\n\t\t);\r\n\r\n}\r\n\r\nexport default Square;","import React , {Component} from 'react';\r\nimport Square from './Square';\r\nimport 'tachyons';\r\n\r\nclass Game extends Component \r\n{\r\n constructor (props)\r\n\t {\r\n\t \tsuper(props);\r\n\t \tthis.state = {\r\n\t \t\tsquares:Array(9).fill(null),\r\n\t \t\tturnX:true,\r\n\t \t\t\r\n\t \t};\r\n\t }\r\n\r\nclick(i) \r\n { \r\n    const squares=this.state.squares.slice();\r\n\r\n  if (this.calculatewinner(squares)||squares[i])\r\n  { return; }\r\n  squares[i]=this.state.turnX? 'X':'O';\r\n\r\n  this.setState({squares:squares,\r\n    turnX:!this.state.turnX,\r\n  });\r\n  }\r\n\r\ncreatebutton(i) \r\n{\r\n  return <Square letter={this.state.squares[i]} onclick={()=>this.click(i)} />\r\n}  \r\n\r\n\r\ncalculatewinner(squares)  \r\n{\r\n   const winninglines = [\r\n   [1,2,3],\r\n   [4,5,6],\r\n   [7,8,9],\r\n   [1,5,9],\r\n   [3,5,7],\r\n   [1,4,7],\r\n   [2,5,8],\r\n   [3,6,9],\r\n   ];\r\n\r\n   for(let j=0; j<winninglines.length; j++)\r\n   {\r\n    const [a,b,c] = winninglines[j];\r\n    if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){ \r\n      return squares[a];\r\n    }\r\n    }\r\n    return null;\r\n\r\n\r\n }\r\n\r\n\r\n\r\n\r\n\r\n render()\r\n{\r\n\r\n  let status;\r\n  const winner = this.calculatewinner(this.state.squares);\r\n  \r\n    if (winner) {\r\n      status = 'Winner:' + winner;\r\n    } \r\n    else \r\n    {\r\n      status = 'Next player:' + (this.state.turnX ? 'X' : 'O');\r\n    }\r\n  \r\n\t\r\n    return(\r\n\r\n    <div className=\"ma4\">\r\n    <div>{status}</div>\r\n    <div className=\"flex flexwrap  justify-center\">\r\n     {this.createbutton(1)}\r\n     {this.createbutton(2)}\r\n     {this.createbutton(3)}\r\n    </div>\r\n\r\n    <div className=\"flex flexwrap  justify-center\">\r\n      {this.createbutton(4)}\r\n      {this.createbutton(5)}\r\n      {this.createbutton(6)}\r\n    </div>\r\n\r\n    <div className=\"flex flexwrap  justify-center\">\r\n    {this.createbutton(7)}\r\n    {this.createbutton(8)}\r\n    {this.createbutton(9)}\r\n    </div>\r\n \r\n      </div>\r\n\r\n         \r\n\t\t \r\n\t\r\n\t\t\r\n\r\n\t);\r\n}\r\n}\r\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <Game/>,\n  document.getElementById('root')\n);\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}